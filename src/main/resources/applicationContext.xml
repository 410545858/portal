<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/data/mongo
    http://www.springframework.org/schema/data/mongo/spring-mongo.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-4.1.xsd"
	default-autowire="byName" default-lazy-init="true">
	
	<context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true" />
	<context:property-placeholder location="classpath:config.properties" ignore-unresolvable="true" />
	<context:property-placeholder location="classpath:mongo.properties" ignore-unresolvable="true" />
	<context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true" />
	<context:property-placeholder location="classpath:elasticsearch.properties" ignore-unresolvable="true" />

	<!-- Default bean name is 'mongo' -->
	<!-- <mongo:mongo id="mongo" replica-set="${mongo.replica.set}"/> -->
	<mongo:mongo id="portalMongo" host="${portal.mongo.host}" port="${portal.mongo.port}">
		<mongo:options 
			connections-per-host="${mongo.connectionsPerHost}"
			threads-allowed-to-block-for-connection-multiplier="${mongo.threadsAllowedToBlockForConnectionMultiplier}"
			connect-timeout="${mongo.connectTimeout}" 
			max-wait-time="${mongo.maxWaitTime}"
			auto-connect-retry="${mongo.autoConnectRetry}" 
			socket-keep-alive="${mongo.socketKeepAlive}"
			socket-timeout="${mongo.socketTimeout}" 
			slave-ok="${mongo.slaveOk}"
			write-number="1" 
			write-timeout="0" 
			write-fsync="true" 
			/>
	</mongo:mongo>
	
	<mongo:mongo id="consoleMongo" host="${console.mongo.host}" port="${console.mongo.port}">
		<mongo:options 
			connections-per-host="${mongo.connectionsPerHost}"
			threads-allowed-to-block-for-connection-multiplier="${mongo.threadsAllowedToBlockForConnectionMultiplier}"
			connect-timeout="${mongo.connectTimeout}" 
			max-wait-time="${mongo.maxWaitTime}"
			auto-connect-retry="${mongo.autoConnectRetry}" 
			socket-keep-alive="${mongo.socketKeepAlive}"
			socket-timeout="${mongo.socketTimeout}" 
			slave-ok="${mongo.slaveOk}"
			write-number="1" 
			write-timeout="0" 
			write-fsync="true" 
			/>
	</mongo:mongo>

	<mongo:db-factory id="portalFactory"
					  dbname="${portal.mongo.dbname}" 
					  mongo-ref="portalMongo" 
					  username="${portal.mongo.username}"
					  password="${portal.mongo.password}"/>
					  
	<mongo:db-factory id="consoleFactory"
					  dbname="${console.mongo.dbname}" 
					  mongo-ref="consoleMongo" 
					  username="${console.mongo.username}"
					  password="${console.mongo.password}"
					  authentication-dbname="admin"/>

	<!-- <bean id="noClassMongoConverter" class="com.frank.startup.portal.mongodb.MongoConverterEnhanceFactoryBean">
		<property name="converter" ref="mongoConverter" />
    </bean> -->
    
    <bean id="defaultMongoTypeMapper" class="org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper">  
        <constructor-arg name="typeKey">  
            <null /><!-- 这里设置为空,可以把 spring data mongodb 多余保存的_class字段去掉 -->  
        </constructor-arg>  
    </bean>
    
	<mongo:mapping-converter id="mongoConverter" db-factory-ref="portalFactory" type-mapper-ref="defaultMongoTypeMapper"/>

	
	<mongo:template id="portalMongoTemplate" db-factory-ref="portalFactory" converter-ref="mongoConverter" />
	
	<mongo:template id="consoleMongoTemplate" db-factory-ref="consoleFactory" write-concern="SAFE"/>
	
	<!-- Spring data Redis -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="usePool" value="true"></property>
        <property name="hostName" value="${redis.host}" />
        <property name="port" value="${redis.port}" />
        <property name="password" value="${redis.pass}" />
        <property name="timeout" value="${redis.timeout}" />
        <property name="database" value="${redis.default.db}"></property>
        <constructor-arg index="0" ref="jedisPoolConfig" />
    </bean>
 
    <!-- jedis pool配置 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.maxActive}" />
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxWaitMillis" value="${redis.maxWait}" />
        <!--
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
        -->
    </bean>
 
    <!-- Redis Template -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <!-- 如果不配置Serializer，那么存储的时候智能使用String，如果用User类型存储，那么会提示错误User can't cast to String --> 
        <property name="keySerializer">
             <bean
                 class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
             <bean
                 class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
         </property>
    </bean>
    
    <bean id="redisSessionFilter" class="com.frank.startup.portal.spring.filter.RedisHttpSessionFilter"/>
    
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="/resource/messages/messages" />
		<property name="cacheSeconds" value="120" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>
	
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">  
        <property name="providerClass"  value="org.hibernate.validator.HibernateValidator"/>  
        <property name="validationMessageSource" ref="messageSource"/>  
	</bean>
	
	<bean id="setSolrServerUrl" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	    <property name="staticMethod" value="com.frank.startup.portal.util.SolrUtil.setSolrServerUrl"/>
	    <property name="arguments">
	        <list>
	        	<value>${solr.server.url}</value>
	        </list>
	   </property>
	</bean>
	
	<bean id="setSMSKey" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	    <property name="staticMethod" value="com.frank.startup.portal.util.SMSUtil.setSMSKey"/>
	    <property name="arguments">
	        <list>
	        	<value>${sms.key}</value>
	        </list>
	   </property>
	</bean>
	
	<bean id="setAlipay" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	    <property name="staticMethod" value="com.frank.startup.portal.alipay.config.AlipayConfig.init"/>
	    <property name="arguments">
	        <list>
	        	<value>${alipay.notify}</value>
	        	<value>${alipay.return}</value>
	        </list>
	   </property>
	</bean>
	
	<import resource="spring-dataSource.xml" />
	<import resource="spring-elasticsearch.xml"/>
	<!-- <import resource="spring-quartz.xml" /> -->
</beans>